(track.file.location <- paste0(album.directories[i],"/",file))
#Create an object containing the current trackâ€™s filename. Use str sub() to remove the .WAV at the end of the current track. Next, use the naming convention of files to extract just the track name using str split().
(file.name <- str_sub(file,end=-5))
track.split <- str_split(file.name,"-", simplify = T)
(track.name = track.split[3])
#Create an object containing the desired output file. We would like it to be [artist name]-[album name]-[track name].json.
(artist.name <- track.split[2])
album.split <- str_split(album.directories[1],"/", simplify=T)
(album.name <- album.split[3])
output.file <- paste0(artist.name,"-",album.name,"-",track.name,".json")
#Use the paste() function to paste "streaming_extractor_music.exe", the track file, and the desired output filename together to create the command line prompt for the current track. Save the result to the code.to.process vector.
command.line = paste("streaming_extractor_music.exe",track.file.location, output.file)
(code.to.process <- c(code.to.process,command.line))
}
}
(code.to.process)
# '"'
(code.to.process)
getwd()
setwd(/Users/anyasuko/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-anyasuko)
setwd(Users/anyasuko/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-anyasuko)
install.packages("jsonlite")
library(jsonlite)
library(tidyverse)
library(dplyr)
library(xtable)
allentown.data <- read_csv("data/essentia.data.allentown.csv")
setwd("~/Documents/GitHub/lab-5-summarizing-and-graphing-data-in-r-anyasuko")
library(tidyverse)
library(dplyr)
library(xtable)
allentown.data <- read_csv("data/essentia.data.allentown.csv")
essentia.data <- read_csv("data/essentia.data.csv")
#function that takes the current feature, and generates a comparison result for allentown vs. the three artists, and returns the comparisions
compare <- function(feature, allen.feature){
essentia.data |>
group_by(artist) %>%
summarize(
min = min(get(feature), na.rm=T),
q1 = quantile(get(feature), .25, na.rm=T),
q3 = quantile(get(feature), .75, na.rm=T),
qr = q3-q1,
LF = q1 - (1.51*qr),
UF = q3 + (1.51*qr),
max = max(get(feature), na.rm=T)
) %>%
mutate(out.of.range = (min > allen.feature)|(max< allen.feature),
unusual = (LF>allen.feature)|(max<allen.feature),
) %>%
mutate(
description = case_when(out.of.range==TRUE~ "Out of Range",
unusual == TRUE~ "Outlying",
TRUE ~ "Within Range")
)%>%
select(artist, description)
}
# goes through all different features for both the essentia data and the allentown line of data
# and calls func() for each feature to determine if allentown is in/out/close to the range for the current feature
num.of.cols <- ncol(essentia.data)
#make data frame to store "description" into every time, this is what rest of the lab is for
comparison.output.df <- tibble(feature =character(), `The Front Bottoms` = character(), `All Get Out`= character(), `Manchester Orchestra`=character())
for (i in 4:num.of.cols){
feature = colnames(essentia.data)[i]
if (!is.numeric(essentia.data[[feature]])){
next
}
allen.feature = allentown.data[[feature]]
description = compare(feature, allen.feature) |> #outputs a table, col is either artist/description, row is for each artist and description
pivot_wider(id_cols=everything(),
names_from = artist,
values_from = description)  |>
mutate(feature = feature) |>
select(feature, everything())
comparison.output.df <-  comparison.output.df|>
bind_rows(description)
}
print(comparison.output.df, n = Inf)
features.to.keep <- c()
for(i in 1:nrow(comparison.output.df)){
if (comparison.output.df[[2]][i] == "Outlying" || comparison.output.df[[3]][i] == "Outlying" || comparison.output.df[[4]][i] == "Outlying"){
features.to.keep <- c(features.to.keep, comparison.output.df[[1]][i])
}
}
(features.to.keep)
#make the table only of certain outputs, then make all those outputs into a ggplot.
output.table <- xtable(comparison.output.df, lable= "output.tab")
print(output.table,
table.placement = "H", include.rownames=FALSE, size = "small")
(features.to.keep)
output.table <- xtable(features.to.keep, lable= "output.tab")
tibble(features.to.keep)
output.table <- xtable(features.to.keep, lable= "output.tab")
comparison.output.df.select(features.to.keep)
features.to.keep <- data.frame(features.to.keep)
#make the table only of certain outputs, then make all those outputs into a ggplot.
output.table <- xtable(features.to.keep, lable= "output.tab")
print(output.table,
table.placement = "H", include.rownames=FALSE, size = "small")
features.to.keep
features.to.keep <- c()
comparison.output.df<- comparison.output.df|>
rowwise()|>
list <- list(c_across(everything()))
for(i in 1:nrow(comparison.output.df)){
if (comparison.output.df[[2]][i] == "Outlying" || comparison.output.df[[3]][i] == "Outlying" || comparison.output.df[[4]][i] == "Outlying"){
features.to.keep <- c(features.to.keep, comparison.output.df[[1]][i])
}
}
(features.to.keep)
comparison.output.df <- comparison.output.df|>
select(overall_loudness, spectral_entropy, dissonance, average_loudness, authentic)
comparison.output.df <- comparison.output.df|>
select(spectral_entropy, dissonance, average_loudness, authentic)
(features.to.keep)
comparison.output.df <- comparison.output.df|>
filter(feature= spectral_entropy, feature = dissonance, feature = average_loudness, feature = authentic)
comparison.output.df <- comparison.output.df|>
filter(feature == spectral_entropy, feature == dissonance, feature == average_loudness, feature == authentic)
view(comparison.output.df)
comparison.output.df <- comparison.output.df|>
filter(feature == "overall_loudness", feature == "spectral_entropy", feature == "dissonance", feature == "average_loudness", feature == "authentic")
#make the table only of certain outputs, then make all those outputs into a ggplot.
output.table <- xtable(comparison.output.df, lable= "output.tab")
print(output.table,
table.placement = "H", include.rownames=FALSE, size = "small")
comparison.output.df <- comparison.output.df|>
select(`The Front Bottoms` == "Outlying",`All Get Out` == "Outlying",`Manchester Orchestra` == "Outlying" )
comparison.output.df <- comparison.output.df|>
filter(feature==overall_loudness)
comparison.output.df <- comparison.output.df|>
filter(feature== "overall_loudness")
comparison.output.df <- comparison.output.df|>
filter(feature== "overall_loudness", feature == "spectral_entropy", feature== "dissonance", feature== "average_loudness", feature=="Authentic")
#make the table only of certain outputs, then make all those outputs into a ggplot.
output.table <- xtable(comparison.output.df, lable= "output.tab")
print(output.table,
table.placement = "H", include.rownames=FALSE, size = "small")
? filter()
? filter()
comparison.output.df <- comparison.output.df|>
rowwise()|>
select(overall_loudness,spectral_entropy,dissonance,average_loudness,Authentic)
comparison.output.df <- comparison.output.df|>
filter(feature %in% features.to.keep)
(comparison.output.df)
features.to.keep <- c()
for(i in 1:nrow(comparison.output.df)){
if (comparison.output.df[[2]][i] == "Outlying" || comparison.output.df[[3]][i] == "Outlying" || comparison.output.df[[4]][i] == "Outlying"){
features.to.keep <- c(features.to.keep, comparison.output.df[[1]][i])
}
}
comparison.output.df <- comparison.output.df|>
filter(feature %in% features.to.keep)
(comparison.output.df)
comparison.output.df <- comparison.output.df%>%
filter(feature %in% features.to.keep)
(comparison.output.df)
comparison.output.df <-comparison.output.df[which(comparison.output.df$feature %in% features.to.keep), ]
(comparison.output.df)
(features.to.keep)
for(i in 1:nrow(comparison.output.df)){
if (comparison.output.df[[2]][i] == "Outlying" || comparison.output.df[[3]][i] == "Outlying" || comparison.output.df[[4]][i] == "Outlying"){
features.to.keep <- c(features.to.keep, comparison.output.df[[1]][i])
}
}
comparison.output.df <- tibble(feature =character(), `The Front Bottoms` = character(), `All Get Out`= character(), `Manchester Orchestra`=character())
for (i in 4:num.of.cols){
feature = colnames(essentia.data)[i]
if (!is.numeric(essentia.data[[feature]])){
next
}
allen.feature = allentown.data[[feature]]
description = compare(feature, allen.feature) |> #outputs a table, col is either artist/description, row is for each artist and description
pivot_wider(id_cols=everything(),
names_from = artist,
values_from = description)  |>
mutate(feature = feature) |>
select(feature, everything())
comparison.output.df <-  comparison.output.df|>
bind_rows(description)
}
view(comparison.output.df)
features.to.keep <- c()
for(i in 1:nrow(comparison.output.df)){
if (comparison.output.df[[2]][i] == "Outlying" || comparison.output.df[[3]][i] == "Outlying" || comparison.output.df[[4]][i] == "Outlying"){
features.to.keep <- c(features.to.keep, comparison.output.df[[1]][i])
}
}
(features.to.keep)
comparison.output.df <-comparison.output.df|>
filter(feature == "overall_loudness" || feature== "spectral_entropy" || feature=="dissonance" || feature== "average_loudness" || feature == "Authentic")
comparison.output.df <-comparison.output.df|>
filter(comparison.output.df$feature == "overall_loudness" | comparison.output.df$feature== "spectral_entropy" | comparison.output.df$feature=="dissonance" | comparison.output.df$feature== "average_loudness" | comparison.output.df$feature == "Authentic")
(comparison.output.df)
output.table <- xtable(comparison.output.df, lable= "output.tab")
print(output.table,
table.placement = "H", include.rownames=FALSE, size = "small")
setwd("~/Documents/GitHub/lab-5-summarizing-and-graphing-data-in-r-anyasuko")
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) + # Show the distribution for each artist
geom_point(aes(color = artist), size = 3) + # Show actual data points
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1) + # Add dashed line for Allentown value
facet_wrap(~feature, scales = "free_y") + # Facet by feature
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# View the reshaped data
head(all_data_long)
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) + # Show the distribution for each artist
geom_point(aes(color = artist), size = 3) + # Show actual data points
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1) + # Add dashed line for Allentown value
facet_wrap(~feature, scales = "free_y") + # Facet by feature
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability
# Reshape data into long format for plotting
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.5) + # Adjust transparency and width of boxplots
geom_point(aes(color = artist), size = 4, alpha = 0.7) + # Increase size of points for clarity
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.5) + # Increase line thickness for better visibility
facet_wrap(~feature, scales = "free_y") + # Facet by feature
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) + # Define custom colors
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
subtitle = "Each boxplot shows feature distribution for each artist. Dashed line represents Allentown.",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12), # Rotate x-axis labels and adjust size
axis.text.y = element_text(size = 12), # Adjust y-axis label size
strip.text = element_text(size = 14), # Adjust facet label size
legend.position = "top", # Move legend to the top
legend.title = element_blank(), # Remove legend title
legend.text = element_text(size = 12), # Increase legend text size
panel.grid.major = element_line(color = "gray", size = 0.3), # Add grid lines for better visual guidance
panel.grid.minor = element_blank() # Remove minor grid lines
) +
guides(color = guide_legend(override.aes = list(size = 5))) # Adjust legend item size
# Reshape data into long format for plotting
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.6) +
geom_point(aes(color = artist), size = 4, alpha = 0.3) +
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.5) +
facet_wrap(~feature, scales = "free_y") +
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) +
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 12),
strip.text = element_text(size = 14),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major = element_line(color = "gray", size = 0.3),
panel.grid.minor = element_blank()
) +
guides(color = guide_legend(override.aes = list(size = 5))) # Adjust legend item size
# Reshape data into long format for plotting
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.6) +
geom_point(aes(color = artist), size = 2, alpha = 0.3) +
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.5) +
facet_wrap(~feature, scales = "free_y") +
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) +
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 12),
strip.text = element_text(size = 14),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major = element_line(color = "gray", size = 0.3),
panel.grid.minor = element_blank()
) +
guides(color = guide_legend(override.aes = list(size = 5))) # Adjust legend item size
# Reshape data into long format for plotting
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.6) +
geom_point(aes(color = artist), size = 2, alpha = 0.3) +
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.0) +
facet_wrap(~feature, scales = "free_y") +
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) +
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.text.y = element_text(size = 12),
strip.text = element_text(size = 14),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major = element_line(color = "gray", size = 0.3),
panel.grid.minor = element_blank()
) +
guides(color = guide_legend(override.aes = list(size = 5))) # Adjust legend item size
# Reshape data into long format for plotting
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.6) +
geom_point(aes(color = artist), size = 2, alpha = 0.3) +
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.0) +
facet_wrap(~feature, scales = "free_y") +
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) +
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = "gray", size = 0.3),
panel.grid.minor = element_blank()
) +
guides(color = guide_legend(override.aes = list(size = 5))) # Adjust legend item size
setwd("~/Documents/GitHub/lab-5-summarizing-and-graphing-data-in-r-anyasuko")
# Reshape data into long format for plotting
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.6) +
geom_point(aes(color = artist), size = 2, alpha = 0.3) +
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.0) +
#facet_wrap(~feature, scales = "free_y") +
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) +
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = "gray", size = 0.3),
panel.grid.minor = element_blank()
) +
guides(color = guide_legend(override.aes = list(size = 5))) # Adjust legend item size
all_data_long <- essentia.data %>%
select(artist, all_of(features.to.keep)) %>%
pivot_longer(cols = -artist, names_to = "feature", values_to = "value") %>%
mutate(is_allentown = ifelse(artist == "Allentown", TRUE, FALSE))
# Add a column for the Allentown song feature value to use as reference
allen_values <- allentown.data %>%
select(all_of(features.to.keep)) %>%
pivot_longer(cols = everything(), names_to = "feature", values_to = "allen_value")
all_data_long <- all_data_long %>%
left_join(allen_values, by = "feature")
# Create the ggplot to visualize the data
ggplot(all_data_long, aes(x = artist, y = value, color = artist)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7, width = 0.6) +
geom_point(aes(color = artist), size = 2, alpha = 0.3) +
geom_hline(aes(yintercept = allen_value, color = "Allentown"), linetype = "dashed", size = 1.0) +
facet_wrap(~feature, scales = "free_y") +
scale_color_manual(values = c("The Front Bottoms" = "#1f77b4",
"All Get Out" = "#ff7f0e",
"Manchester Orchestra" = "#2ca02c",
"Allentown" = "#d62728")) +
theme_minimal() +
labs(
title = "Comparison of Features: Allentown vs Artists",
y = "Feature Value",
x = "Artist",
color = "Artist"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size = 8),
#panel.grid.major = element_line(color = "gray", size = 0.3),
#panel.grid.minor = element_blank()
) +
guides(color = guide_legend(override.aes = list(size = 5)))
setwd("~/Documents/GitHub/lab-5-summarizing-and-graphing-data-in-r-anyasuko")
setwd("~/Documents/GitHub/lab-5-summarizing-and-graphing-data-in-r-anyasuko")
